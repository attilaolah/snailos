load("//pkg:emscripten_foreign_cc.bzl", "configure_make", "keyval")
load("//pkg:wasm_binaries.bzl", "wasm_binaries")

wasm_binaries(
    name = "bin",
    srcs = [":busybox.pkg"],
    visibility = ["//visibility:public"],
)

ARGS = {
    "HOSTCC": "cc",
    "HOSTCXX": "c++",
}

K8_ARGS = {
    "CC": "cc",
}

EM_ARGS = {
    "AR": "${EMSCRIPTEN}/emar",
    "AS": "false",  # refuse to assemble
    "CC": "${EMSCRIPTEN}/emcc",
    "NM": "${EMSCRIPTEN}/emnm",
    "OBJCOPY": "${EMSCRIPTEN}/../bin/llvm-objcopy",
    "OBJDUMP": "${EMSCRIPTEN}/../bin/llvm-objdump",
    "SKIP_STRIP": "y",
    "CFLAGS_busybox": '"{}"'.format(" ".join([
        # See: https://github.com/emscripten-core/emscripten/issues/20753
        "${EMSCRIPTEN}/system/lib/libc/musl/src/signal/sigisemptyset.c",
        "--pre-js=${EXT_BUILD_ROOT}/$(execpath //src/wrap:pre_js)",
        "--post-js=${EXT_BUILD_ROOT}/$(execpath //src/wrap:post_js)",
        "-sASYNCIFY=1",  # JSPI=off, Asyncify=on
        "-sASYNCIFY_STACK_SIZE=1048576",  # 1 MiB
        "-sENVIRONMENT=web",
        "-sEXPORT_ES6",
        "-sMODULARIZE",
        "-sWASM_BIGINT",

        # Disable exceptions.
        # Once JSPI is supported, exceptions can be enabled.
        "-fno-exceptions",

        # Wrapped syscalls:
        "-L${EXT_BUILD_ROOT}/$(dirname $(execpath //src/wrap))",
        "-lwrap",
        "-Wl,--wrap=__syscall_wait4",
        "-Wl,--wrap=read",
        #"-Wl,--wrap=vfork",
        #"-Wl,--wrap=waitpid",

        # TODO: Enable the below in -c dbg builds only!
        "-sASSERTIONS",
    ])),
}

CONFIG = "//pkg/busybox/config"

configure_make(
    name = "busybox.pkg",
    args = select({
        "@platforms//cpu:wasm32": keyval(ARGS, EM_ARGS),
        "//conditions:default": keyval(ARGS, K8_ARGS),
    }),
    # TODO: select() for :JS inputs!
    build_data = [
        CONFIG,
        "//src/wrap:pre_js",
        "//src/wrap:post_js",
    ],
    # TODO: Update the configure patch,
    # so that it would update CFLAGS, LDFLAGS, etc. in the config file.
    configure_in_place = True,
    env = {"CONFIG": "$(execpath //pkg/busybox/config)"},
    lib_source = "@busybox_src//:all",
    out_binaries = select({
        "@platforms//cpu:wasm32": [
            "busybox.js",
            "busybox.wasm",
        ],
        "//conditions:default": ["busybox"],
    }),
    postfix_script = select({
        "@platforms//cpu:wasm32": "\n".join([
            'sed s/busybox_unstripped/busybox/g < _install/bin/busybox > "${INSTALLDIR}/bin/busybox.js"',
            'cp busybox_unstripped.wasm "${INSTALLDIR}/bin/busybox.wasm"',
        ]),
        "//conditions:default": "cp _install/bin/* ${INSTALLDIR}/bin",
    }),
    deps = select({
        "@platforms//cpu:wasm32": ["//src/wrap"],
        "//conditions:default": [],
    }),
)
