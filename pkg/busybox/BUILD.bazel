load("//pkg:emscripten_foreign_cc.bzl", "configure_make", "keyval")
load("//pkg:wasm_binaries.bzl", "wasm_binaries")

wasm_binaries(
    name = "bin",
    srcs = [":busybox.build"],
    visibility = ["//visibility:public"],
)

ARGS = {
    "HOSTCC": "cc",
    "HOSTCXX": "c++",
}

K8_ARGS = {
    "CC": "cc",
}

EM_ARGS = {
    "AR": "${EMSCRIPTEN}/emar",
    "AS": "false",  # refuse to assemble
    "CC": "${EMSCRIPTEN}/emcc",
    "NM": "${EMSCRIPTEN}/emnm",
    "OBJCOPY": "${EMSCRIPTEN}/../bin/llvm-objcopy",
    "OBJDUMP": "${EMSCRIPTEN}/../bin/llvm-objdump",
    "SKIP_STRIP": "y",
    "CFLAGS_busybox": '"{}"'.format(" ".join([
        "-sEXPORT_ES6",
        "-sMODULARIZE",
        "-sWASM_BIGINT",
    ])),
}

configure_make(
    name = "busybox.build",
    args = select({
        "@platforms//cpu:wasm32": keyval(ARGS, EM_ARGS),
        "//conditions:default": keyval(ARGS, K8_ARGS),
    }),
    build_data = ["//pkg/busybox/config"],
    configure_in_place = True,
    env = {"CONFIG": "$(execpath //pkg/busybox/config)"},
    lib_source = "@busybox_src//:all",
    out_binaries = select({
        "@platforms//cpu:wasm32": [
            "busybox.js",
            "busybox.wasm",
        ],
        "//conditions:default": ["busybox"],
    }),
    postfix_script = select({
        "@platforms//cpu:wasm32": "\n".join([
            'sed s/busybox_unstripped/busybox/g < _install/bin/busybox > "${INSTALLDIR}/bin/busybox.js"',
            'cp busybox_unstripped.wasm "${INSTALLDIR}/bin/busybox.wasm"',
        ]),
        "//conditions:default": "cp _install/bin/* ${INSTALLDIR}/bin",
    }),
)
