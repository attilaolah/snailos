diff --git Makefile.flags Makefile.flags
index 1cec5ba20..3e74e7e58 100644
--- Makefile.flags
+++ Makefile.flags
@@ -47,11 +47,6 @@ endif
 # gcc 3.x emits bogus "old style proto" warning on find.c:alloc_action()
 CFLAGS += $(call cc-ifversion, -ge, 0400, -Wold-style-definition)
 
-ifneq ($(CC),clang)
-# "clang-9: warning: optimization flag '-finline-limit=0' is not supported
-CFLAGS += $(call cc-option,-finline-limit=0,)
-endif
-
 CFLAGS += $(call cc-option,-fno-builtin-strlen -fomit-frame-pointer -ffunction-sections -fdata-sections,)
 # -fno-guess-branch-probability: prohibit pseudo-random guessing
 # of branch probabilities (hopefully makes bloatcheck more stable):
@@ -65,44 +60,18 @@ CFLAGS += $(call cc-option,-static-libgcc,)
 endif
 
 CFLAGS += $(call cc-option,-falign-functions=1,)
-ifneq ($(CC),clang)
-# "clang-9: warning: optimization flag '-falign-jumps=1' is not supported" (and same for other two)
-CFLAGS += $(call cc-option,-falign-jumps=1 -falign-labels=1 -falign-loops=1,)
-endif
 
-# Defeat .eh_frame bloat (gcc 4.6.3 x86-32 defconfig: 20% smaller busybox binary):
-CFLAGS += $(call cc-option,-fno-unwind-tables,)
-CFLAGS += $(call cc-option,-fno-asynchronous-unwind-tables,)
 # No automatic printf->puts,putchar conversions
 # (try disabling this and comparing assembly, it's instructive)
 CFLAGS += $(call cc-option,-fno-builtin-printf,)
 
 # clang-9 does not like "str" + N and "if (CONFIG_ITEM && cond)" constructs
-ifeq ($(CC),clang)
 CFLAGS += $(call cc-option,-Wno-string-plus-int -Wno-constant-logical-operand)
-endif
 
 # FIXME: These warnings are at least partially to be concerned about and should
 # be fixed..
 #CFLAGS += $(call cc-option,-Wconversion,)
 
-ifneq ($(CONFIG_DEBUG),y)
-CFLAGS += $(call cc-option,-Oz,$(call cc-option,-Os,$(call cc-option,-O2,)))
-else
-CFLAGS += $(call cc-option,-g,)
-#CFLAGS += "-D_FORTIFY_SOURCE=2"
-ifeq ($(CONFIG_DEBUG_PESSIMIZE),y)
-CFLAGS += $(call cc-option,-O0,)
-else
-CFLAGS += $(call cc-option,-Oz,$(call cc-option,-Os,$(call cc-option,-O2,)))
-endif
-endif
-ifeq ($(CONFIG_DEBUG_SANITIZE),y)
-CFLAGS += $(call cc-option,-fsanitize=address,)
-CFLAGS += $(call cc-option,-fsanitize=leak,)
-CFLAGS += $(call cc-option,-fsanitize=undefined,)
-endif
-
 # If arch/$(ARCH)/Makefile did not override it (with, say, -fPIC)...
 ARCH_FPIC ?= -fpic
 ARCH_FPIE ?= -fpie
diff --git configure configure
new file mode 100755
index 000000000..82c4d5042
--- /dev/null
+++ configure
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+# We have a prepared configuration, copy it to where it is expected.
+# If no configuration is present, then do nothing, we will likely generate it.
+if [ -n "$CONFIG" ]; then
+  CFLAGS_ESC=$(printf "%s\n" "${CFLAGS}" | sed 's/[\&/]/\\&/g')
+  LDFLAGS_ESC=$(printf "%s\n" "${LDFLAGS}" | sed 's/[\&/]/\\&/g')
+  sed --regexp-extended \
+    --expression "s/^CONFIG_EXTRA_CFLAGS=\"(.*)\"$/CONFIG_EXTRA_CFLAGS=\"${CFLAGS_ESC}\"/" \
+    --expression "s/^CONFIG_EXTRA_LDFLAGS=\"(.*)\"$/CONFIG_EXTRA_LDFLAGS=\"${LDFLAGS_ESC}\"/" \
+    "${CONFIG}" > .config
+fi
diff --git scripts/trylink scripts/trylink
index 2255deee7..583ed4af7 100755
--- scripts/trylink
+++ scripts/trylink
@@ -96,7 +96,7 @@ fi
 START_GROUP="-Wl,--start-group"
 END_GROUP="-Wl,--end-group"
 INFO_OPTS() {
-	echo "-Wl,--warn-common -Wl,-Map,$EXE.map -Wl,--verbose"
+	echo "-Wl,-Map,$EXE.map -Wl,--verbose"
 }
 
 # gold may not support --sort-common (yet)
@@ -320,7 +320,6 @@ int main(int argc, char **argv)
 		$SORT_SECTION \
 		$GC_SECTIONS \
 		-L"$sharedlib_dir" -lbusybox \
-		-Wl,--warn-common \
 	|| {
 	    echo "Linking $EXE failed"
 	    cat $EXE.out
